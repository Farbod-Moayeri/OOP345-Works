///////////////////////////////////////////////////////
//                  WorkShop 8 - Part 2
// Name: Farbod Moayeri
// Id: 134395227
// Email: fmoayeri2@myseneca.ca
// Section: NFF
// Date: 2023-11-19
///////////////////////////////////////////////////////
// I have done all the coding by myself and only copied
// the code that my professor provided to complete my 
// workshops and assignments.
///////////////////////////////////////////////////////


Q. the advantage that smart pointer syntax provides. Use example from your code to support your explanation.


The advantage that smart pointer syntax provides is that you do not have the responsibility to clean up the heap memory, and therefore
cannot have a memory leak as easily as when you use raw pointers.

DataBase<Profile> excludeSmart(const DataBase<Profile>& allProfiles, const DataBase<Profile>& bannedProfiles) {
		
		

		DataBase<Profile> result;
		bool skip = false;

		for (auto i = 0u; i < allProfiles.size(); i++)
		{
			skip = false;

			for (auto j = 0u; j < bannedProfiles.size(); j++)
			{
				if ((allProfiles[i].m_age == bannedProfiles[j].m_age) && (allProfiles[i].m_name.first_name == bannedProfiles[j].m_name.first_name) && (allProfiles[i].m_name.last_name == bannedProfiles[j].m_name.last_name))
				{
					skip = true;
					break;
				}

			}

			if (!skip)
			{

				std::shared_ptr<Profile> temp(new Profile(allProfiles[i].m_name, allProfiles[i].m_address, allProfiles[i].m_age));

				try {
					temp->validateAddress();
				}
				catch (const std::string& e)
				{
					
					throw e;
				}

				result += temp;

			}
		}


		return result;
		
	}

As you can see here, when I create a share_ptr and it overwrites a previous shared_ptr, I do not need to worry about deallocating the resource. I dont need
to delete it. I dont set it to nullptr here because it would be redundant as it is being freed anyway when it is overwritten.

Q. the difference between raw and smart pointer syntax in your solution.

The difference is that for the raw pointer solution, I create a Profile pointer and allocate memory from the heap to it. And I am also responsible for
deallocating it.

Profile *temp = new Profile(allProfiles[i].m_name, allProfiles[i].m_address, allProfiles[i].m_age);

For the smart pointer solution, I create a shared pointer of type Profile and I allocate a Profile to it. I use a shared pointer because the object that is
stored within it is meant for shared ownership, it will not be unique. And I couldnt pass a unique pointer in the parameter of the += operator because
Unique pointers have their copy constructor and assignment deleted, they are not meant to be copied in any way.

Q. look at the output when the profiles are excluded using raw/smart pointers: the objects are duplicated a lot of times 
(e.g., the object with ID 176 is duplicated into object 177; then object 177 is duplicated into object 180 and 177 gets deleted; 
object 180 is duplicated into 183 and then is deleted, etc.). Explain why so many copies are created!

Hint Put a breakpoint into function(s) exclude... and follow the execution of your code line by line. 
Check when the messages come into the output, and what operations trigger making so many copies.
How would you redesign the application to reduce the number of copies that are made?

So many copies are made because the vector that stores everything has to resize itself. And when it resizes itself, it has to copy its existing stored objects
to resize itself. Thats why there are so many copies. I would redesign the application such that the vector holds pointers to objects so the id of the objects
wouldnt keep incrementing as new objects are not made and then copied, the pointers to them are. It is also much less resource intensive for the vector to
handle pointer copying rather than object copying.

Q. The class Profile doesn't provide an explicit move constructor. 
What happens if in the DataBase you add objects into the collection attribute using std:move()? 
Do an experiment and report your findings.

It seems to operate like a copy constructor instead. The resources of the Profile is not moved, it is instead copied. I assume this happens because Profile
has multiple resources that do not have copy constructors and that the compilor would only be able to properly move the resources of an object if all of those
resources have a move constructor defined.

